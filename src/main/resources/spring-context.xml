<?xml version="1.0" encoding="utf-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"


       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <context:annotation-config />

    <context:component-scan base-package="com">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />

        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--配置bean-->
    <bean id="helloWorld" class="com.spring.beans.HelloWorld">
    <property name="name" value="spring"></property>
    </bean>
    <!--通过构造方法来配置bean属性-->
    <!--使用构造器注入属性值可以指定参数的位置和类型，以区分重载的构造器-->
    <bean id="car" class="com.spring.beans.Car">
        <constructor-arg value="Audi" index="0"></constructor-arg>
        <constructor-arg  index="1">
            <!--特殊字符处理![CDATA[]]-->
            <value><![CDATA[<shanghai^>]]></value>
        </constructor-arg>
        <constructor-arg value="30000" index="2"></constructor-arg>
    </bean>
    <bean id="car2" class="com.spring.beans.Car">
        <constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
        <constructor-arg value="shanghai" type="java.lang.String"></constructor-arg>
        <constructor-arg value="600" type="int"></constructor-arg>
    </bean>
    <bean id="person" class="com.spring.beans.Person">
        <property name="name" value="Tom"></property>
        <property name="age"  value="24"></property>
        <!--<property name="car" ref="car2"></property>-->
        <!--内部bean,不能被外部引用，只能在内部使用-->
        <property name="car">
            <bean id="car3" class="com.spring.beans.Car">
                <constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
                <constructor-arg value="shanghai" type="java.lang.String"></constructor-arg>
                <constructor-arg value="600" type="int"></constructor-arg>
            </bean>
        </property>
    </bean>
    <!--集合属性配置-->
<bean id="person3" class="com.spring.beans.Collection">
    <property name="name" value="mike"></property>
    <property name="age" value="22"></property>
    <property name="cars">
        <list>
            <ref bean="car"></ref>
            <ref bean="car2"></ref>
            <bean class="com.spring.beans.Car">
                <constructor-arg value="benchi" type="java.lang.String"></constructor-arg>
                <constructor-arg value="wuhan" type="java.lang.String"></constructor-arg>
                <constructor-arg value="3000" type="int"></constructor-arg>
            </bean>
        </list>
    </property>
</bean>
    <!--配置Map属性值-->
<bean id="newPerson" class="com.spring.beans.Collection">
    <property name="name" value="mike"></property>
    <property name="age" value="22"></property>
    <property name="mapcar">
        <map>
            <entry key="AA" value-ref="car"></entry>
            <entry key="bb" value-ref="car2"></entry>
        </map>
    </property>
</bean>
    <!--配置properties属性-->
<bean id="dataSource" class="com.spring.beans.DataSource">
    <property name="pro">
        <props>
            <prop key="user">root</prop>
            <prop key="password">123456</prop>
            <prop key="jdbcUrl">jdbc:mysql:///test</prop>
            <prop key="driverClass">com.mysql.jdbc.Driver</prop>
        </props>
    </property>
</bean>
     <!--配置单例bean，以供多个bean,-->
    <util:list id="cars">
        <ref bean="car" />
        <ref bean="car2" />
    </util:list>
    <bean id="person4" class="com.spring.beans.Collection">
        <property name="name" value="mike"></property>
        <property name="age" value="22"></property>
        <property name="cars" ref="cars"></property>
    </bean>
<!--通过p命名空间为bean的属性赋值，需要导入p命名空间-->
<bean id="person5" class="com.spring.beans.Collection" p:age="30"
    p:name="Queen" p:cars-ref="cars">
</bean>
    <!--可以使用autowire属性指定自动装配的方式，byname根据bean的名字的setter
    风格属性进行自动装配，若有则自动装配，没有则不匹配  byType根据bean的类型和
    当前bean的属性类型进行自动装配，若IOC容器中有一个以上的类型匹配的bean则抛出异常-->
    <bean id="person6" class="com.spring.beans.Collection" p:age="30"
          p:name="Queen" autowire="byName">
    </bean>

</beans>